{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPOlXiHVs3WacZw6kVj/ji7",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gunwes16/Data-110/blob/main/Week2_class_ChrisLipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "dc-Ziv-FlZD3"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#df-pd.read_csv\n",
        "df=pd.read_csv('/content/happiness_2017 (1).csv')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "L--OgMe2l-Rw"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "TbIy1E2Noil7",
        "outputId": "6103ce7b-9f0d-4516-aacd-9b3c502d3a55"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Country          Region  Rank  HappinessScore  Life Ladder  \\\n",
              "0       Norway  Western Europe     1           7.537     7.578745   \n",
              "1      Denmark  Western Europe     2           7.522     7.593702   \n",
              "2      Iceland  Western Europe     3           7.504     7.476214   \n",
              "3  Switzerland  Western Europe     4           7.494     7.473593   \n",
              "4      Finland  Western Europe     5           7.469     7.788252   \n",
              "\n",
              "   Log GDP per capita  Social support  Healthy life expectancy at birth  \\\n",
              "0           11.081789        0.950128                         71.086586   \n",
              "1           10.748989        0.952100                         71.662498   \n",
              "2           10.760409        0.966753                         72.755981   \n",
              "3           10.955548        0.949661                         73.173759   \n",
              "4           10.612338        0.963826                         71.696960   \n",
              "\n",
              "   Freedom to make life choices  Generosity  Perceptions of corruption  \\\n",
              "0                      0.953017    0.210104                   0.249711   \n",
              "1                      0.955416    0.145387                   0.181148   \n",
              "2                      0.938783    0.235479                   0.726845   \n",
              "3                      0.924997    0.167875                   0.316183   \n",
              "4                      0.962199   -0.012174                   0.192413   \n",
              "\n",
              "   Positive affect  Negative affect  Confidence in national government  \n",
              "0         0.849100         0.202914                           0.717160  \n",
              "1         0.823667         0.205775                           0.572353  \n",
              "2         0.895255         0.148160                           0.365042  \n",
              "3         0.773997         0.195871                           0.819707  \n",
              "4         0.787137         0.176066                           0.597539  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2ac2ec8c-4384-487f-8b25-d89e658c2650\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>Rank</th>\n",
              "      <th>HappinessScore</th>\n",
              "      <th>Life Ladder</th>\n",
              "      <th>Log GDP per capita</th>\n",
              "      <th>Social support</th>\n",
              "      <th>Healthy life expectancy at birth</th>\n",
              "      <th>Freedom to make life choices</th>\n",
              "      <th>Generosity</th>\n",
              "      <th>Perceptions of corruption</th>\n",
              "      <th>Positive affect</th>\n",
              "      <th>Negative affect</th>\n",
              "      <th>Confidence in national government</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Norway</td>\n",
              "      <td>Western Europe</td>\n",
              "      <td>1</td>\n",
              "      <td>7.537</td>\n",
              "      <td>7.578745</td>\n",
              "      <td>11.081789</td>\n",
              "      <td>0.950128</td>\n",
              "      <td>71.086586</td>\n",
              "      <td>0.953017</td>\n",
              "      <td>0.210104</td>\n",
              "      <td>0.249711</td>\n",
              "      <td>0.849100</td>\n",
              "      <td>0.202914</td>\n",
              "      <td>0.717160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Denmark</td>\n",
              "      <td>Western Europe</td>\n",
              "      <td>2</td>\n",
              "      <td>7.522</td>\n",
              "      <td>7.593702</td>\n",
              "      <td>10.748989</td>\n",
              "      <td>0.952100</td>\n",
              "      <td>71.662498</td>\n",
              "      <td>0.955416</td>\n",
              "      <td>0.145387</td>\n",
              "      <td>0.181148</td>\n",
              "      <td>0.823667</td>\n",
              "      <td>0.205775</td>\n",
              "      <td>0.572353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Iceland</td>\n",
              "      <td>Western Europe</td>\n",
              "      <td>3</td>\n",
              "      <td>7.504</td>\n",
              "      <td>7.476214</td>\n",
              "      <td>10.760409</td>\n",
              "      <td>0.966753</td>\n",
              "      <td>72.755981</td>\n",
              "      <td>0.938783</td>\n",
              "      <td>0.235479</td>\n",
              "      <td>0.726845</td>\n",
              "      <td>0.895255</td>\n",
              "      <td>0.148160</td>\n",
              "      <td>0.365042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Switzerland</td>\n",
              "      <td>Western Europe</td>\n",
              "      <td>4</td>\n",
              "      <td>7.494</td>\n",
              "      <td>7.473593</td>\n",
              "      <td>10.955548</td>\n",
              "      <td>0.949661</td>\n",
              "      <td>73.173759</td>\n",
              "      <td>0.924997</td>\n",
              "      <td>0.167875</td>\n",
              "      <td>0.316183</td>\n",
              "      <td>0.773997</td>\n",
              "      <td>0.195871</td>\n",
              "      <td>0.819707</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Finland</td>\n",
              "      <td>Western Europe</td>\n",
              "      <td>5</td>\n",
              "      <td>7.469</td>\n",
              "      <td>7.788252</td>\n",
              "      <td>10.612338</td>\n",
              "      <td>0.963826</td>\n",
              "      <td>71.696960</td>\n",
              "      <td>0.962199</td>\n",
              "      <td>-0.012174</td>\n",
              "      <td>0.192413</td>\n",
              "      <td>0.787137</td>\n",
              "      <td>0.176066</td>\n",
              "      <td>0.597539</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ac2ec8c-4384-487f-8b25-d89e658c2650')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2ac2ec8c-4384-487f-8b25-d89e658c2650 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2ac2ec8c-4384-487f-8b25-d89e658c2650');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-04d78896-55f5-4d37-a149-9e0dbd0abc8c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04d78896-55f5-4d37-a149-9e0dbd0abc8c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-04d78896-55f5-4d37-a149-9e0dbd0abc8c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 140,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 140,\n        \"samples\": [\n          \"Gabon\",\n          \"Jordan\",\n          \"Taiwan Province of China\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Sub-Saharan Africa\",\n          \"North America and ANZ\",\n          \"Southeast Asia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40,\n        \"min\": 1,\n        \"max\": 140,\n        \"num_unique_values\": 140,\n        \"samples\": [\n          109,\n          68,\n          32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HappinessScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1097498836517892,\n        \"min\": 2.693,\n        \"max\": 7.537,\n        \"num_unique_values\": 136,\n        \"samples\": [\n          5.235,\n          5.902,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life Ladder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.122178436020664,\n        \"min\": 2.66171813,\n        \"max\": 7.788251877,\n        \"num_unique_values\": 140,\n        \"samples\": [\n          4.782382965,\n          4.808082581,\n          6.359450817\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log GDP per capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1849354933546576,\n        \"min\": 6.625340939,\n        \"max\": 11.46523094,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          10.02889156,\n          9.635466576,\n          10.44522285\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Social support\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12111698195971196,\n        \"min\": 0.319589138,\n        \"max\": 0.9667528272,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          0.6340255737,\n          0.8837704062,\n          0.8911191225\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Healthy life expectancy at birth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.595596622342877,\n        \"min\": 44.38652802,\n        \"max\": 76.53636169,\n        \"num_unique_values\": 140,\n        \"samples\": [\n          57.1261673,\n          64.4178772,\n          71.20999908\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Freedom to make life choices\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12796884470884706,\n        \"min\": 0.427010864,\n        \"max\": 0.9851777554,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          0.7382128239,\n          0.6848463416,\n          0.7596547604\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Generosity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16106365118660346,\n        \"min\": -0.2967349887,\n        \"max\": 0.62870574,\n        \"num_unique_values\": 132,\n        \"samples\": [\n          -0.166747421,\n          0.1249361858,\n          0.1911131293\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Perceptions of corruption\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17979906599699463,\n        \"min\": 0.1617906839,\n        \"max\": 0.9543925524,\n        \"num_unique_values\": 128,\n        \"samples\": [\n          0.6730655432,\n          0.8615902066,\n          0.794457376\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Positive affect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10724640469331333,\n        \"min\": 0.4209618866,\n        \"max\": 0.8952545524,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          0.7044771314,\n          0.5097212195,\n          0.8372772932\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Negative affect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09198486419704124,\n        \"min\": 0.1141231582,\n        \"max\": 0.5993354917,\n        \"num_unique_values\": 139,\n        \"samples\": [\n          0.4224608839,\n          0.3264070749,\n          0.1141231582\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Confidence in national government\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19823479888276602,\n        \"min\": 0.1109365299,\n        \"max\": 0.9646904469,\n        \"num_unique_values\": 127,\n        \"samples\": [\n          0.4130321145,\n          0.6011172533,\n          0.2508273125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 451
        },
        "id": "ZSi_JxRzoxZ5",
        "outputId": "6a27636c-d338-4d48-f9e1-1a8bc424ae59"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                      Country              Region  Rank  HappinessScore  \\\n",
              "135                   Liberia  Sub-Saharan Africa   136           3.533   \n",
              "136                    Guinea  Sub-Saharan Africa   137           3.507   \n",
              "137                      Togo  Sub-Saharan Africa   138           3.495   \n",
              "138                  Tanzania  Sub-Saharan Africa   139           3.349   \n",
              "139  Central African Republic  Sub-Saharan Africa   140           2.693   \n",
              "\n",
              "     Life Ladder  Log GDP per capita  Social support  \\\n",
              "135     4.424491            6.629414        0.684867   \n",
              "136     4.873723            7.527477        0.634026   \n",
              "137     4.360805            7.251670        0.507805   \n",
              "138     3.347121            7.896314        0.705010   \n",
              "139     3.475862                 NaN        0.319589   \n",
              "\n",
              "     Healthy life expectancy at birth  Freedom to make life choices  \\\n",
              "135                         52.786850                      0.733390   \n",
              "136                         51.151817                      0.738213   \n",
              "137                         52.257275                      0.716694   \n",
              "138                         56.665485                      0.800496   \n",
              "139                         44.645351                      0.645252   \n",
              "\n",
              "     Generosity  Perceptions of corruption  Positive affect  Negative affect  \\\n",
              "135    0.040577                   0.866806         0.667946         0.391331   \n",
              "136    0.054308                   0.750026         0.704477         0.422461   \n",
              "137   -0.037704                   0.725520         0.614189         0.425824   \n",
              "138    0.106599                   0.653606         0.714646         0.255336   \n",
              "139         NaN                   0.889566         0.613865         0.599335   \n",
              "\n",
              "     Confidence in national government  \n",
              "135                           0.554992  \n",
              "136                           0.639981  \n",
              "137                           0.484952  \n",
              "138                           0.913339  \n",
              "139                           0.650285  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c6dab7cd-ef12-441d-b608-af2d93e38059\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Country</th>\n",
              "      <th>Region</th>\n",
              "      <th>Rank</th>\n",
              "      <th>HappinessScore</th>\n",
              "      <th>Life Ladder</th>\n",
              "      <th>Log GDP per capita</th>\n",
              "      <th>Social support</th>\n",
              "      <th>Healthy life expectancy at birth</th>\n",
              "      <th>Freedom to make life choices</th>\n",
              "      <th>Generosity</th>\n",
              "      <th>Perceptions of corruption</th>\n",
              "      <th>Positive affect</th>\n",
              "      <th>Negative affect</th>\n",
              "      <th>Confidence in national government</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>135</th>\n",
              "      <td>Liberia</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>136</td>\n",
              "      <td>3.533</td>\n",
              "      <td>4.424491</td>\n",
              "      <td>6.629414</td>\n",
              "      <td>0.684867</td>\n",
              "      <td>52.786850</td>\n",
              "      <td>0.733390</td>\n",
              "      <td>0.040577</td>\n",
              "      <td>0.866806</td>\n",
              "      <td>0.667946</td>\n",
              "      <td>0.391331</td>\n",
              "      <td>0.554992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>136</th>\n",
              "      <td>Guinea</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>137</td>\n",
              "      <td>3.507</td>\n",
              "      <td>4.873723</td>\n",
              "      <td>7.527477</td>\n",
              "      <td>0.634026</td>\n",
              "      <td>51.151817</td>\n",
              "      <td>0.738213</td>\n",
              "      <td>0.054308</td>\n",
              "      <td>0.750026</td>\n",
              "      <td>0.704477</td>\n",
              "      <td>0.422461</td>\n",
              "      <td>0.639981</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>137</th>\n",
              "      <td>Togo</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>138</td>\n",
              "      <td>3.495</td>\n",
              "      <td>4.360805</td>\n",
              "      <td>7.251670</td>\n",
              "      <td>0.507805</td>\n",
              "      <td>52.257275</td>\n",
              "      <td>0.716694</td>\n",
              "      <td>-0.037704</td>\n",
              "      <td>0.725520</td>\n",
              "      <td>0.614189</td>\n",
              "      <td>0.425824</td>\n",
              "      <td>0.484952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>138</th>\n",
              "      <td>Tanzania</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>139</td>\n",
              "      <td>3.349</td>\n",
              "      <td>3.347121</td>\n",
              "      <td>7.896314</td>\n",
              "      <td>0.705010</td>\n",
              "      <td>56.665485</td>\n",
              "      <td>0.800496</td>\n",
              "      <td>0.106599</td>\n",
              "      <td>0.653606</td>\n",
              "      <td>0.714646</td>\n",
              "      <td>0.255336</td>\n",
              "      <td>0.913339</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>139</th>\n",
              "      <td>Central African Republic</td>\n",
              "      <td>Sub-Saharan Africa</td>\n",
              "      <td>140</td>\n",
              "      <td>2.693</td>\n",
              "      <td>3.475862</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.319589</td>\n",
              "      <td>44.645351</td>\n",
              "      <td>0.645252</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.889566</td>\n",
              "      <td>0.613865</td>\n",
              "      <td>0.599335</td>\n",
              "      <td>0.650285</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c6dab7cd-ef12-441d-b608-af2d93e38059')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c6dab7cd-ef12-441d-b608-af2d93e38059 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c6dab7cd-ef12-441d-b608-af2d93e38059');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-07d0b4b0-1771-4938-93ee-7c47704b6689\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07d0b4b0-1771-4938-93ee-7c47704b6689')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-07d0b4b0-1771-4938-93ee-7c47704b6689 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Guinea\",\n          \"Central African Republic\",\n          \"Togo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Sub-Saharan Africa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 136,\n        \"max\": 140,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HappinessScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3552559640597185,\n        \"min\": 2.693,\n        \"max\": 3.533,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.507\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life Ladder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6573184293949466,\n        \"min\": 3.347121239,\n        \"max\": 4.873722553,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4.873722553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log GDP per capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5343555254120608,\n        \"min\": 6.629414082,\n        \"max\": 7.896313667,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          7.527477264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Social support\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15976146202856437,\n        \"min\": 0.319589138,\n        \"max\": 0.7050102949,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.6340255737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Healthy life expectancy at birth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.359447104510311,\n        \"min\": 44.64535141,\n        \"max\": 56.66548538,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          51.15181732\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Freedom to make life choices\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05558068274661808,\n        \"min\": 0.645252347,\n        \"max\": 0.8004955053,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7382128239\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Generosity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.059651407791407166,\n        \"min\": -0.0377044864,\n        \"max\": 0.1065989062,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.05430758372\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Perceptions of corruption\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09917171863035462,\n        \"min\": 0.6536060572,\n        \"max\": 0.8895660043,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.750026226\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Positive affect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0479813001487933,\n        \"min\": 0.6138651967,\n        \"max\": 0.714645505,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7044771314\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Negative affect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1226080562762142,\n        \"min\": 0.2553356886,\n        \"max\": 0.5993354917,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4224608839\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Confidence in national government\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.16256299591717888,\n        \"min\": 0.4849523604,\n        \"max\": 0.9133390188,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.639980793\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b0iSOcl0pBu5",
        "outputId": "c726e181-8be0-4e25-e9a3-7472e2624db0"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 140 entries, 0 to 139\n",
            "Data columns (total 14 columns):\n",
            " #   Column                             Non-Null Count  Dtype  \n",
            "---  ------                             --------------  -----  \n",
            " 0   Country                            140 non-null    object \n",
            " 1   Region                             140 non-null    object \n",
            " 2   Rank                               140 non-null    int64  \n",
            " 3   HappinessScore                     140 non-null    float64\n",
            " 4   Life Ladder                        140 non-null    float64\n",
            " 5   Log GDP per capita                 133 non-null    float64\n",
            " 6   Social support                     139 non-null    float64\n",
            " 7   Healthy life expectancy at birth   140 non-null    float64\n",
            " 8   Freedom to make life choices       139 non-null    float64\n",
            " 9   Generosity                         132 non-null    float64\n",
            " 10  Perceptions of corruption          128 non-null    float64\n",
            " 11  Positive affect                    139 non-null    float64\n",
            " 12  Negative affect                    139 non-null    float64\n",
            " 13  Confidence in national government  127 non-null    float64\n",
            "dtypes: float64(11), int64(1), object(2)\n",
            "memory usage: 15.4+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        },
        "id": "ceEG1xGyprY6",
        "outputId": "c086da5b-14a4-47c0-85bb-5fc308638410"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Rank  HappinessScore  Life Ladder  Log GDP per capita  \\\n",
              "count  140.0000      140.000000   140.000000          133.000000   \n",
              "mean    70.5000        5.398907     5.491702            9.345615   \n",
              "std     40.5586        1.109750     1.122178            1.184935   \n",
              "min      1.0000        2.693000     2.661718            6.625341   \n",
              "25%     35.7500        4.542500     4.636694            8.545789   \n",
              "50%     70.5000        5.302000     5.586507            9.547693   \n",
              "75%    105.2500        6.212000     6.278276           10.313942   \n",
              "max    140.0000        7.537000     7.788252           11.465231   \n",
              "\n",
              "       Social support  Healthy life expectancy at birth  \\\n",
              "count      139.000000                        140.000000   \n",
              "mean         0.806711                         63.440981   \n",
              "std          0.121117                          7.595597   \n",
              "min          0.319589                         44.386528   \n",
              "25%          0.736748                         58.005130   \n",
              "50%          0.828953                         65.209110   \n",
              "75%          0.905827                         69.062944   \n",
              "max          0.966753                         76.536362   \n",
              "\n",
              "       Freedom to make life choices  Generosity  Perceptions of corruption  \\\n",
              "count                    139.000000  132.000000                 128.000000   \n",
              "mean                       0.777874   -0.011614                   0.735870   \n",
              "std                        0.127969    0.161064                   0.179799   \n",
              "min                        0.427011   -0.296735                   0.161791   \n",
              "25%                        0.711635   -0.141405                   0.681880   \n",
              "50%                        0.811671   -0.035203                   0.782116   \n",
              "75%                        0.878373    0.098457                   0.857171   \n",
              "max                        0.985178    0.628706                   0.954393   \n",
              "\n",
              "       Positive affect  Negative affect  Confidence in national government  \n",
              "count       139.000000       139.000000                         127.000000  \n",
              "mean          0.699412         0.291164                           0.493701  \n",
              "std           0.107246         0.091985                           0.198235  \n",
              "min           0.420962         0.114123                           0.110937  \n",
              "25%           0.614203         0.219028                           0.333884  \n",
              "50%           0.710230         0.280323                           0.473544  \n",
              "75%           0.788236         0.345125                           0.617711  \n",
              "max           0.895255         0.599335                           0.964690  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bcbe3267-93db-4921-b93a-6005ed26726f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rank</th>\n",
              "      <th>HappinessScore</th>\n",
              "      <th>Life Ladder</th>\n",
              "      <th>Log GDP per capita</th>\n",
              "      <th>Social support</th>\n",
              "      <th>Healthy life expectancy at birth</th>\n",
              "      <th>Freedom to make life choices</th>\n",
              "      <th>Generosity</th>\n",
              "      <th>Perceptions of corruption</th>\n",
              "      <th>Positive affect</th>\n",
              "      <th>Negative affect</th>\n",
              "      <th>Confidence in national government</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>140.0000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>133.000000</td>\n",
              "      <td>139.000000</td>\n",
              "      <td>140.000000</td>\n",
              "      <td>139.000000</td>\n",
              "      <td>132.000000</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>139.000000</td>\n",
              "      <td>139.000000</td>\n",
              "      <td>127.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>70.5000</td>\n",
              "      <td>5.398907</td>\n",
              "      <td>5.491702</td>\n",
              "      <td>9.345615</td>\n",
              "      <td>0.806711</td>\n",
              "      <td>63.440981</td>\n",
              "      <td>0.777874</td>\n",
              "      <td>-0.011614</td>\n",
              "      <td>0.735870</td>\n",
              "      <td>0.699412</td>\n",
              "      <td>0.291164</td>\n",
              "      <td>0.493701</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>40.5586</td>\n",
              "      <td>1.109750</td>\n",
              "      <td>1.122178</td>\n",
              "      <td>1.184935</td>\n",
              "      <td>0.121117</td>\n",
              "      <td>7.595597</td>\n",
              "      <td>0.127969</td>\n",
              "      <td>0.161064</td>\n",
              "      <td>0.179799</td>\n",
              "      <td>0.107246</td>\n",
              "      <td>0.091985</td>\n",
              "      <td>0.198235</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.0000</td>\n",
              "      <td>2.693000</td>\n",
              "      <td>2.661718</td>\n",
              "      <td>6.625341</td>\n",
              "      <td>0.319589</td>\n",
              "      <td>44.386528</td>\n",
              "      <td>0.427011</td>\n",
              "      <td>-0.296735</td>\n",
              "      <td>0.161791</td>\n",
              "      <td>0.420962</td>\n",
              "      <td>0.114123</td>\n",
              "      <td>0.110937</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>35.7500</td>\n",
              "      <td>4.542500</td>\n",
              "      <td>4.636694</td>\n",
              "      <td>8.545789</td>\n",
              "      <td>0.736748</td>\n",
              "      <td>58.005130</td>\n",
              "      <td>0.711635</td>\n",
              "      <td>-0.141405</td>\n",
              "      <td>0.681880</td>\n",
              "      <td>0.614203</td>\n",
              "      <td>0.219028</td>\n",
              "      <td>0.333884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>70.5000</td>\n",
              "      <td>5.302000</td>\n",
              "      <td>5.586507</td>\n",
              "      <td>9.547693</td>\n",
              "      <td>0.828953</td>\n",
              "      <td>65.209110</td>\n",
              "      <td>0.811671</td>\n",
              "      <td>-0.035203</td>\n",
              "      <td>0.782116</td>\n",
              "      <td>0.710230</td>\n",
              "      <td>0.280323</td>\n",
              "      <td>0.473544</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>105.2500</td>\n",
              "      <td>6.212000</td>\n",
              "      <td>6.278276</td>\n",
              "      <td>10.313942</td>\n",
              "      <td>0.905827</td>\n",
              "      <td>69.062944</td>\n",
              "      <td>0.878373</td>\n",
              "      <td>0.098457</td>\n",
              "      <td>0.857171</td>\n",
              "      <td>0.788236</td>\n",
              "      <td>0.345125</td>\n",
              "      <td>0.617711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>140.0000</td>\n",
              "      <td>7.537000</td>\n",
              "      <td>7.788252</td>\n",
              "      <td>11.465231</td>\n",
              "      <td>0.966753</td>\n",
              "      <td>76.536362</td>\n",
              "      <td>0.985178</td>\n",
              "      <td>0.628706</td>\n",
              "      <td>0.954393</td>\n",
              "      <td>0.895255</td>\n",
              "      <td>0.599335</td>\n",
              "      <td>0.964690</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bcbe3267-93db-4921-b93a-6005ed26726f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bcbe3267-93db-4921-b93a-6005ed26726f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bcbe3267-93db-4921-b93a-6005ed26726f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f8f74fb7-0423-491a-801f-cea3e87a9a61\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f8f74fb7-0423-491a-801f-cea3e87a9a61')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f8f74fb7-0423-491a-801f-cea3e87a9a61 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Rank\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50.15227114772639,\n        \"min\": 1.0,\n        \"max\": 140.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          140.0,\n          70.5,\n          105.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HappinessScore\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.88304505908787,\n        \"min\": 1.1097498836517892,\n        \"max\": 140.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.398907142857143,\n          5.302,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Life Ladder\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 47.84747949704329,\n        \"min\": 1.122178436020664,\n        \"max\": 140.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.491702054228573,\n          5.586506605,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Log GDP per capita\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.25542992913488,\n        \"min\": 1.1849354933546576,\n        \"max\": 133.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.34561516481203,\n          9.547693253,\n          133.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Social support\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.908157691004604,\n        \"min\": 0.12111698195971196,\n        \"max\": 139.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8067114301690648,\n          0.8289526105,\n          139.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Healthy life expectancy at birth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36.92450741424552,\n        \"min\": 7.595596622342877,\n        \"max\": 140.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          63.44098148342857,\n          65.20911026,\n          140.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Freedom to make life choices\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.906312415772305,\n        \"min\": 0.12796884470884706,\n        \"max\": 139.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.777873992708633,\n          0.811670661,\n          139.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Generosity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 46.64947110481711,\n        \"min\": -0.2967349887,\n        \"max\": 132.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.011613525548378788,\n          -0.035202777015,\n          132.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Perceptions of corruption\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 45.03594928287011,\n        \"min\": 0.1617906839,\n        \"max\": 128.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.7358699747085938,\n          0.7821161151,\n          128.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Positive affect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.93060642158896,\n        \"min\": 0.10724640469331333,\n        \"max\": 139.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6994120450769783,\n          0.7102302313,\n          139.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Negative affect\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49.04613351075965,\n        \"min\": 0.09198486419704124,\n        \"max\": 139.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.2911644702906474,\n          0.2803233564,\n          139.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Confidence in national government\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.740802402365624,\n        \"min\": 0.1109365299,\n        \"max\": 127.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.49370114792677167,\n          0.473544389,\n          127.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.columns)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MHMk_c-Dpv45",
        "outputId": "5b74c3c2-4a11-4cc5-89e1-4bdc9b560e26"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Country', 'Region', 'Rank', 'HappinessScore', 'Life Ladder',\n",
            "       'Log GDP per capita', 'Social support',\n",
            "       'Healthy life expectancy at birth', 'Freedom to make life choices',\n",
            "       'Generosity', 'Perceptions of corruption', 'Positive affect',\n",
            "       'Negative affect', 'Confidence in national government'],\n",
            "      dtype='object')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.style.use('ggplot')"
      ],
      "metadata": {
        "id": "dFmIOvmq0XcR"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(16,10))\n",
        "plt.scatter(df['Rank'], df['HappinessScore'])\n",
        "plt.xlabel('Rank')\n",
        "plt.ylabel('HappinessScore')\n",
        "plt.title(' Rank vs HappinessScore')\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 747
        },
        "id": "V25uHVvHqUdK",
        "outputId": "f8a06d57-6abe-4d66-9e0a-b70308794184"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x1000 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}